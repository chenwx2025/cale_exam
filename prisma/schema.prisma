// Prisma Schema for Cale Exam System
// 数据库架构设计

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 考试信息元数据
model ExamInfo {
  id                String   @id @default(cuid())
  examType          String   @unique // 考试类型：cale 或 nccaom
  name              String   // 考试名称（中文）
  nameEn            String   // 考试名称（英文）
  fullName          String   // 考试全称
  description       String   // 考试简介
  duration          Int      // 考试时长（分钟）
  totalQuestions    Int      // 总题数
  passingScore      Int      // 及格分数（百分比）
  examFee           String?  // 考试费用
  examFormat        String?  // 考试形式（机考/笔试）
  retakePolicy      String?  // 重考政策
  validityPeriod    String?  // 证书有效期
  officialWebsite   String?  // 官方网站
  contentOverview   String   // 考试内容概述
  preparationTips   String?  // 备考建议
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// 考试大纲分类
model Category {
  id              String     @id @default(cuid())
  name            String     // 分类名称（中文）
  nameEn          String?    // 分类名称（英文）
  code            String     // 分类代码（如：DOMAIN_1_ASSESSMENT、DOMAIN_2_DIAGNOSIS）
  examType        String     @default("cale") // 考试类型：cale（加州）、nccaom（全国）
  type            String     // 类型：organization（组织部分）、content（内容部分）、review（复习部分）
  description     String?    // 分类描述
  detailedInfo    String?    // 详细信息（考试占比、重点内容等）
  questionCount   Int?       // 该分类预期题目数量
  weight          Int?       // 考试权重（百分比）
  keyPoints       String?    // 重点知识点（JSON格式）
  studyTips       String?    // 学习建议
  parentId        String?    // 父分类ID（支持多级分类）
  parent          Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children        Category[] @relation("CategoryHierarchy")
  questions       Question[] // 该分类下的题目
  order           Int        @default(0) // 显示顺序
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@unique([code, examType]) // 同一考试类型内分类代码唯一
  @@index([type])
  @@index([examType])
  @@index([parentId])
}

// 题目
model Question {
  id             String           @id @default(cuid())
  examType       String           @default("cale") // 考试类型：cale（加州）、nccaom（全国）
  type           String           // 题型：multiple_choice（选择题）、true_false（判断题）、case_study（案例题）
  question       String           // 题目内容
  options        String?          // 选项（JSON格式，如：["A. 选项1", "B. 选项2"]）
  correctAnswer  String           // 正确答案
  explanation    String?          // 答案解析
  difficulty     String           @default("medium") // 难度：easy、medium、hard
  categoryId     String           // 所属分类
  category       Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tags           String?          // 标签（JSON格式，用于额外分类）
  source         String?          // 题目来源
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userAnswers        UserAnswer[]              // 用户答题记录
  studyPlans         StudyPlanItem[]           // 学习计划关联
  examAnswers        ExamAnswer[]              // 考试答题记录
  wrongQuestions     WrongQuestion[]           // 错题本记录
  dailyQuestions     StudyGroupDailyQuestion[] // 小组每日一题

  @@index([categoryId])
  @@index([difficulty])
  @@index([examType])
  @@index([examType, categoryId]) // 复合索引：按考试类型和分类查询
  @@index([examType, difficulty]) // 复合索引：按考试类型和难度查询
  @@index([categoryId, difficulty]) // 复合索引：按分类和难度查询
  @@index([createdAt]) // 索引：按创建时间排序
}

// 用户
model User {
  id                    String                  @id @default(cuid())
  email                 String                  @unique
  password              String                  // bcrypt 加密密码
  name                  String
  nickname              String?                 // 昵称
  avatar                String?                 // 头像URL
  signature             String?                 // 个性签名档
  role                  String                  @default("user") // user | admin
  emailVerified         Boolean                 @default(false)
  emailVerifyToken      String?                 // 邮箱验证 token
  emailVerifyExpires    DateTime?               // 邮箱验证过期时间
  resetPasswordToken    String?                 // 重置密码 token
  resetPasswordExpires  DateTime?               // 重置密码过期时间
  status                String                  @default("active") // active | suspended | deleted
  lastLoginAt           DateTime?               // 最后登录时间
  loginCount            Int                     @default(0) // 登录次数
  tokenVersion          Int                     @default(0) // Token 版本（用于撤销所有 token）
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  // 关联数据
  subscribedExams       UserExamSubscription[]        // 订阅的考试类型
  userAnswers           UserAnswer[]                  // 用户答题记录
  studyPlans            StudyPlan[]                   // 学习计划
  exams                 Exam[]                        // 模拟考试记录
  wrongQuestions        WrongQuestion[]               // 错题本
  studySessions         StudySession[]                // 学习会话
  notifications         Notification[]                // 通知消息
  notificationSettings  NotificationSettings?         // 通知设置
  pushSubscriptions     PushSubscription[]            // Push 通知订阅
  studyGroupMemberships StudyGroupMember[]            @relation("StudyGroupMembers") // 加入的学习小组
  studyGroupPosts       StudyGroupPost[]              // 发布的小组帖子
  studyGroupPostReplies StudyGroupPostReply[]         // 小组帖子回复
  studyGroupCheckIns    StudyGroupCheckIn[]           // 小组打卡记录
  studyGroupPostLikes   StudyGroupPostLike[]          // 小组帖子点赞
  studyGroupReplyLikes  StudyGroupReplyLike[]         // 小组回复点赞
  studyGroupPostBookmarks StudyGroupPostBookmark[]    // 帖子收藏
  userBadges            UserBadge[]                   // 获得的勋章
  mentionsReceived      PostMention[]                 @relation("MentionedUser") // 收到的@提及
  mentionsSent          PostMention[]                 @relation("Mentioner") // 发出的@提及
  dailyQuestionAnswers  StudyGroupDailyQuestionAnswer[] // 每日一题答题记录
  sentInvitations       StudyGroupInvitation[]        @relation("StudyGroupInviter") // 发出的邀请
  receivedInvitations   StudyGroupInvitation[]        @relation("StudyGroupInvitee") // 收到的邀请
  challengeParticipations GroupChallengeParticipant[] // 参与的挑战
  pollVotes             PollVote[]                    // 投票记录

  // 学习笔记相关
  studyNotes            StudyNote[]                   @relation("NoteAuthor") // 创建的小组笔记
  noteAttachments       NoteAttachment[]              @relation("NoteAttachmentUploader") // 上传的附件
  noteContributions     NoteContributor[]             @relation("NoteContributorUser") // 笔记贡献
  noteVersions          NoteVersion[]                 @relation("NoteVersionEditor") // 笔记版本编辑
  noteLikes             NoteLike[]                    @relation("NoteLikeUser") // 笔记点赞
  noteFavorites         NoteFavorite[]                @relation("NoteFavoriteUser") // 笔记收藏
  noteComments          NoteComment[]                 @relation("NoteCommentUser") // 笔记评论

  // 个人笔记相关
  personalNotes         PersonalNote[]                @relation("PersonalNoteAuthor") // 创建的个人笔记
  personalNoteShares    PersonalNoteShare[]           // 分享笔记到小组的记录

  // 资料库相关
  uploadedResources     StudyResource[]               @relation("ResourceUploader") // 上传的资料
  resourceRatings       ResourceRating[]              @relation("ResourceRatings") // 资料评分
  resourceComments      ResourceComment[]             @relation("ResourceComments") // 资料评论
  resourceDownloads     ResourceDownload[]            @relation("ResourceDownloads") // 资料下载记录
  resourceFavorites     ResourceFavorite[]            @relation("ResourceFavorites") // 资料收藏
  resourceFolders       ResourceFolder[]              @relation("ResourceFolders") // 收藏夹

  @@index([email])
  @@index([role])
  @@index([status])
}

// 用户答题记录
model UserAnswer {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId   String
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswer   String   // 用户的答案
  isCorrect    Boolean  // 是否正确
  timeSpent    Int?     // 答题时间（秒）
  attemptCount Int      @default(1) // 尝试次数
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([questionId])
  @@index([userId, questionId])
}

// 学习计划
model StudyPlan {
  id          String          @id @default(cuid())
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String          // 计划名称
  description String?         // 计划描述
  examType    String          @default("cale") // 考试类型: cale, nccaom
  startDate   DateTime        // 开始日期
  endDate     DateTime        // 结束日期
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  items       StudyPlanItem[] // 计划项目

  @@index([userId])
  @@index([examType])
}

// 学习计划项目
model StudyPlanItem {
  id           String     @id @default(cuid())
  studyPlanId  String
  studyPlan    StudyPlan  @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)
  questionId   String
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  scheduledFor DateTime   // 计划学习日期
  completed    Boolean    @default(false)
  completedAt  DateTime?
  notes        String?    // 学习笔记
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([studyPlanId])
  @@index([questionId])
}

// 模拟考试
model Exam {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  examType      String        @default("cale") // 考试类型: cale, nccaom
  title         String        // 考试标题
  categoryId    String?       // 选择的领域/分类（可选，null表示全领域）
  questionCount Int           // 题目数量
  duration      Int           // 考试时长（分钟）
  difficulty    String?       // 难度: easy, medium, hard, mixed
  mode          String        @default("exam") // 模式: exam（考试）, practice（练习）, ai_generated（AI生成题库）
  generatedBy   String?       // 生成方式: domain（按领域）, proportion（按比例）, manual（手动配置）
  status        String        @default("not_started") // 状态: not_started, in_progress, completed, abandoned
  startedAt     DateTime?     // 开始时间
  completedAt   DateTime?     // 完成时间
  timeSpent     Int?          // 实际用时（秒）
  score         Float?        // 得分
  totalScore    Float?        // 总分
  percentage    Float?        // 百分比得分
  passed        Boolean?      // 是否通过
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  answers       ExamAnswer[]  // 答题记录

  @@index([userId])
  @@index([examType])
  @@index([status])
  @@index([mode])
  @@index([generatedBy])
}

// 考试答题记录
model ExamAnswer {
  id         String   @id @default(cuid())
  examId     String
  exam       Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswer String?  // 用户答案（可能未答）
  isCorrect  Boolean? // 是否正确（提交后计算）
  timeSpent  Int?     // 答题时间（秒）
  isMarked   Boolean  @default(false) // 是否标记
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([examId])
  @@index([questionId])
}

// 错题本
model WrongQuestion {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId   String
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  wrongCount   Int      @default(1) // 答错次数
  correctCount Int      @default(0) // 答对次数（重新练习时）
  lastWrong    DateTime @default(now()) // 最后一次答错时间
  lastCorrect  DateTime? // 最后一次答对时间
  mastered     Boolean  @default(false) // 是否已掌握
  masteryLevel Int      @default(0) // 掌握度（0-100）
  notes        String?  // 个人笔记
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, questionId])
  @@index([userId])
  @@index([questionId])
  @@index([mastered])
  @@index([userId, mastered])
}

// 学习会话（用于追踪学习时长）
model StudySession {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  examType  String   @default("cale") // 考试类型
  type      String   // 会话类型：practice（练习）、exam（考试）、review（复习）、wrong_questions（错题练习）
  startTime DateTime @default(now())
  endTime   DateTime?
  duration  Int?     // 持续时间（秒）
  questionsCount Int @default(0) // 本次学习题目数
  correctCount   Int @default(0) // 答对数
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([examType])
  @@index([type])
  @@index([startTime])
}

// 用户考试订阅
model UserExamSubscription {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  examType     String    // cale | nccaom
  isActive     Boolean   @default(true)
  subscribedAt DateTime  @default(now())
  expiresAt    DateTime? // 订阅过期时间（如果是付费订阅）
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([userId, examType])
  @@index([userId])
  @@index([examType])
  @@index([isActive])
}

// 管理员操作日志
model AdminLog {
  id         String   @id @default(cuid())
  adminId    String   // 管理员用户ID
  action     String   // 操作类型: create_question, update_question, delete_question, etc.
  targetType String   // 操作对象类型: question, user, category, etc.
  targetId   String?  // 操作对象ID
  details    String?  // 操作详情 JSON
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([adminId])
  @@index([action])
  @@index([targetType])
  @@index([createdAt])
}

// 通知消息
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // study_reminder（学习提醒）、exam_reminder（考试提醒）、achievement（成就）、system（系统消息）
  title     String   // 通知标题
  message   String   // 通知内容
  link      String?  // 相关链接（可选）
  isRead    Boolean  @default(false) // 是否已读
  createdAt DateTime @default(now())
  readAt    DateTime? // 阅读时间

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
  @@index([userId, isRead])
}

// 通知设置
model NotificationSettings {
  id                String  @id @default(cuid())
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 通知渠道开关
  emailEnabled      Boolean @default(true)   // 邮件通知
  siteEnabled       Boolean @default(true)   // 站内信通知

  // 通知类型开关
  studyReminder     Boolean @default(true)   // 学习提醒
  examReminder      Boolean @default(true)   // 考试提醒
  achievementAlert  Boolean @default(true)   // 成就通知
  systemAlert       Boolean @default(true)   // 系统通知

  // 学习提醒设置
  reminderTime      String  @default("19:00") // 提醒时间 HH:mm
  reminderDays      String  @default("[1,2,3,4,5]") // 提醒日期（JSON数组，0=周日,1=周一...6=周六）
  reminderFrequency String  @default("daily") // 提醒频率: daily（每天）、weekly（每周）、custom（自定义）

  // 学习目标
  dailyGoalMinutes  Int     @default(30)     // 每日学习目标（分钟）
  dailyGoalQuestions Int    @default(20)     // 每日题目目标

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

// 系统设置
model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   // JSON 格式
  description String?
  category    String   // auth, exam, notification, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String?  // 更新者用户ID

  @@index([category])
  @@index([key])
}
// Push 通知订阅（Phase 5 Sprint 2）
model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint  String   @unique // Push 订阅端点
  auth      String   // 认证密钥
  p256dh    String   // 公钥
  userAgent String?  // 用户代理（浏览器信息）
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([endpoint])
}

// 分享记录（Phase 5 Sprint 3）
model Share {
  id          String          @id @default(cuid())
  userId      String
  shareType   String          // achievement（成就）、exam（考试成绩）、milestone（里程碑）
  title       String          // 分享标题
  description String?         // 分享描述
  imageUrl    String?         // 分享卡片图片URL
  content     String          // 分享内容（JSON格式）
  isPublic    Boolean         @default(true) // 是否公开
  viewCount   Int             @default(0) // 浏览次数
  likeCount   Int             @default(0) // 点赞次数
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  expiresAt   DateTime?       // 分享过期时间（可选）
  comments    ShareComment[]  // 评论
  reactions   ShareReaction[] // 反应

  @@index([userId])
  @@index([shareType])
  @@index([isPublic])
  @@index([createdAt])
}

// 分享评论（Phase 6 Sprint 4）
model ShareComment {
  id        String   @id @default(cuid())
  shareId   String
  share     Share    @relation(fields: [shareId], references: [id], onDelete: Cascade)
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shareId])
  @@index([userId])
  @@index([createdAt])
}

// 分享反应（Phase 6 Sprint 4）
model ShareReaction {
  id        String   @id @default(cuid())
  shareId   String
  share     Share    @relation(fields: [shareId], references: [id], onDelete: Cascade)
  userId    String
  type      String   // like, love, celebrate, insightful
  createdAt DateTime @default(now())

  @@unique([shareId, userId])
  @@index([shareId])
  @@index([userId])
}

// 用户资料（Phase 6 Sprint 4）
model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?  // 个人简介
  location  String?  // 位置
  website   String?  // 个人网站
  timezone  String?  // 时区
  studyGoal String?  // 学习目标
  bannerUrl String?  // 横幅图片URL
  isPublic  Boolean  @default(true) // 是否公开资料
  showStats Boolean  @default(true) // 是否显示统计
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// 用户关注关系（Phase 6 Sprint 4）
model UserFollow {
  id          String   @id @default(cuid())
  followerId  String   // 关注者ID
  followingId String   // 被关注者ID
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// 学习小组（Phase 6 Sprint 4）
model StudyGroup {
  id             String                       @id @default(cuid())
  name           String                       // 小组名称
  description    String?                      // 小组描述
  examType       String                       // 考试类型: cale, nccaom
  isPublic       Boolean                      @default(true) // 是否公开
  requireApproval Boolean                     @default(false) // 是否需要审批才能加入
  maxMembers     Int                          @default(50) // 最大成员数
  createdBy      String                       // 创建者ID
  avatarUrl      String?                      // 小组头像
  bannerUrl      String?                      // 小组横幅
  rules          String?                      // 小组规则
  tags           String?                      // 标签（JSON）
  createdAt      DateTime                     @default(now())
  updatedAt      DateTime                     @updatedAt
  members        StudyGroupMember[]
  posts          StudyGroupPost[]
  challenges     GroupChallenge[]
  checkIns       StudyGroupCheckIn[]          // 打卡记录
  dailyQuestions StudyGroupDailyQuestion[]    // 每日一题
  invitations    StudyGroupInvitation[]       // 邀请记录
  joinRequests   StudyGroupJoinRequest[]      // 加入申请
  dailyQuestionConfig StudyGroupDailyQuestionConfig? // 每日一题配置
  postTags       PostTag[]                    // 帖子标签
  studyNotes     StudyNote[]                  // 学习笔记
  sharedPersonalNotes PersonalNoteShare[]      // 从个人笔记分享来的记录
  resources      StudyResource[]              // 资料库

  @@index([examType])
  @@index([isPublic])
  @@index([createdBy])
  @@index([createdAt])
}

// 学习小组每日一题配置
model StudyGroupDailyQuestionConfig {
  id                String      @id @default(cuid())
  groupId           String      @unique
  group             StudyGroup  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  enabled           Boolean     @default(false) // 是否启用自动生成
  generateTime      String      @default("00:00") // 生成时间 HH:MM
  difficulty        String?     // 难度偏好: easy, medium, hard, mixed
  focusDomains      String?     // 关注领域（JSON数组）
  excludeRecent     Int         @default(7) // 排除最近N天出现过的题目
  prioritizeWeak    Boolean     @default(true) // 优先选择组员错误率高的题目
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([groupId])
}

// 学习小组成员（Phase 6 Sprint 4）
model StudyGroupMember {
  id        String     @id @default(cuid())
  groupId   String
  group     StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId    String
  user      User       @relation("StudyGroupMembers", fields: [userId], references: [id], onDelete: Cascade)
  role      String     @default("member") // owner, admin, moderator, member
  joinedAt  DateTime   @default(now())
  isActive  Boolean    @default(true)

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
  @@index([role])
}

// 小组帖子（Phase 6 Sprint 4）
model StudyGroupPost {
  id         String                  @id @default(cuid())
  groupId    String
  group      StudyGroup              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId     String
  user       User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title      String?                 // 帖子标题（问题时使用）
  content    String                  // 帖子内容
  type       String                  @default("discussion") // discussion, question, announcement, resource
  status     String?                 // 问题状态: pending, solved, closed (仅当 type=question 时使用)
  isPinned   Boolean                 @default(false) // 是否置顶
  isFeatured Boolean                 @default(false) // 是否精华帖
  isLocked   Boolean                 @default(false) // 是否锁定（禁止回复）
  lockedAt   DateTime?               // 锁定时间
  lockedBy   String?                 // 锁定操作者ID
  viewCount  Int                     @default(0) // 浏览量
  likeCount  Int                     @default(0)
  replyCount Int                     @default(0)
  deletedAt  DateTime?               // 软删除时间
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  replies    StudyGroupPostReply[]   // 回复列表
  likes      StudyGroupPostLike[]    // 点赞列表
  bookmarks  StudyGroupPostBookmark[] // 收藏列表
  mentions   PostMention[]           // @提及记录
  tags       PostTagRelation[]       // 标签关联
  poll       Poll?                   // 投票（可选）

  @@index([groupId])
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([isPinned])
  @@index([isFeatured])
  @@index([isLocked])
  @@index([viewCount])
  @@index([deletedAt])
}

// 小组帖子回复
model StudyGroupPostReply {
  id           String                 @id @default(cuid())
  postId       String
  post         StudyGroupPost         @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId       String
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  content      String                 // 回复内容
  isBestAnswer Boolean                @default(false) // 是否为最佳答案
  deletedAt    DateTime?              // 软删除时间
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  likes        StudyGroupReplyLike[]  // 点赞列表
  mentions     PostMention[]          // @提及记录

  @@index([postId])
  @@index([userId])
  @@index([createdAt])
  @@index([isBestAnswer])
  @@index([deletedAt])
}

// 小组挑战（Phase 4）
model GroupChallenge {
  id              String                      @id @default(cuid())
  groupId         String
  group           StudyGroup                  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  name            String                      // 挑战名称
  description     String?                     // 挑战描述
  examType        String                      // 考试类型
  categoryId      String?                     // 分类ID（可选）
  targetType      String                      // questions_count, study_time, exam_score, accuracy
  targetValue     Int                         // 目标值
  startDate       DateTime                    // 开始日期
  endDate         DateTime                    // 结束日期
  status          String                      @default("upcoming") // upcoming, active, completed, cancelled
  rewardPoints    Int                         @default(0) // 奖励积分
  maxParticipants Int?                        // 最大参与人数（可选）
  createdBy       String
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  participants    GroupChallengeParticipant[] // 参与者列表

  @@index([groupId])
  @@index([examType])
  @@index([startDate])
  @@index([endDate])
  @@index([status])
}

// 小组挑战参与者（Phase 4）
model GroupChallengeParticipant {
  id            String         @id @default(cuid())
  challengeId   String
  challenge     GroupChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentValue  Int            @default(0) // 当前进度值
  isCompleted   Boolean        @default(false) // 是否完成
  completedAt   DateTime?      // 完成时间
  rank          Int?           // 排名（挑战结束后计算）
  rewardEarned  Int            @default(0) // 获得的奖励积分
  joinedAt      DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([challengeId, userId])
  @@index([challengeId])
  @@index([userId])
  @@index([isCompleted])
  @@index([rank])
}

// 小组学习打卡（Phase 6 Sprint 5）
model StudyGroupCheckIn {
  id              String     @id @default(cuid())
  groupId         String
  group           StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkInDate     String     // 格式: YYYY-MM-DD，用于唯一性约束
  createdAt       DateTime   @default(now()) // 打卡时间

  @@unique([groupId, userId, checkInDate])
  @@index([groupId])
  @@index([userId])
  @@index([checkInDate])
}

// 小组帖子点赞（Phase 6 Sprint 5）
model StudyGroupPostLike {
  id        String         @id @default(cuid())
  postId    String
  post      StudyGroupPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

// 小组回复点赞（Phase 6 Sprint 5）
model StudyGroupReplyLike {
  id        String              @id @default(cuid())
  replyId   String
  reply     StudyGroupPostReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  userId    String
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime            @default(now())

  @@unique([replyId, userId])
  @@index([replyId])
  @@index([userId])
}

// 帖子收藏
model StudyGroupPostBookmark {
  id        String         @id @default(cuid())
  postId    String
  post      StudyGroupPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
}

// @提及记录
model PostMention {
  id              String              @id @default(cuid())
  postId          String?             // 帖子ID（如果提及在帖子中）
  post            StudyGroupPost?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyId         String?             // 回复ID（如果提及在回复中）
  reply           StudyGroupPostReply? @relation(fields: [replyId], references: [id], onDelete: Cascade)
  mentionedUserId String              // 被提及的用户ID
  mentionedUser   User                @relation("MentionedUser", fields: [mentionedUserId], references: [id], onDelete: Cascade)
  mentionerUserId String              // 提及者ID
  mentioner       User                @relation("Mentioner", fields: [mentionerUserId], references: [id], onDelete: Cascade)
  isRead          Boolean             @default(false) // 是否已读
  createdAt       DateTime            @default(now())

  @@index([mentionedUserId])
  @@index([mentionerUserId])
  @@index([postId])
  @@index([replyId])
  @@index([isRead])
}

// 帖子标签
model PostTag {
  id          String         @id @default(cuid())
  groupId     String         // 小组ID (标签作用域限定在小组内)
  group       StudyGroup     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  name        String         // 标签名称
  color       String         @default("#3B82F6") // 标签颜色 (Hex)
  description String?        // 标签描述
  postCount   Int            @default(0) // 使用此标签的帖子数
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  posts       PostTagRelation[] // 使用此标签的帖子
  notes       NoteTag[]      // 使用此标签的笔记

  @@unique([groupId, name]) // 同一小组内标签名唯一
  @@index([groupId])
  @@index([name])
  @@index([postCount])
}

// 帖子-标签关联表
model PostTagRelation {
  id        String         @id @default(cuid())
  postId    String
  post      StudyGroupPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId     String
  tag       PostTag        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())

  @@unique([postId, tagId]) // 同一帖子不能重复添加相同标签
  @@index([postId])
  @@index([tagId])
}

// 用户勋章定义
model Badge {
  id          String      @id @default(cuid())
  code        String      @unique // 勋章代码，如 "study_streak_7", "exam_passer"
  name        String      // 勋章名称
  description String      // 勋章描述
  icon        String      // 勋章图标(emoji或图片URL)
  category    String      // 类别: study(学习), achievement(成就), contribution(贡献), special(特殊)
  rarity      String      @default("common") // 稀有度: common, rare, epic, legendary
  examType    String?     // 考试类型限定(可选): cale, nccaom, null表示通用
  createdAt   DateTime    @default(now())
  userBadges  UserBadge[] // 获得此勋章的用户

  @@index([category])
  @@index([rarity])
  @@index([examType])
}

// 用户获得的勋章
model UserBadge {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId     String
  badge       Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  earnedAt    DateTime @default(now())
  isDisplayed Boolean  @default(true) // 是否在个人资料中显示

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@index([earnedAt])
}

// 小组邀请（Phase 3）
model StudyGroupInvitation {
  id        String     @id @default(cuid())
  groupId   String
  group     StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviterId String
  inviter   User       @relation("StudyGroupInviter", fields: [inviterId], references: [id], onDelete: Cascade)
  inviteeId String
  invitee   User       @relation("StudyGroupInvitee", fields: [inviteeId], references: [id], onDelete: Cascade)
  status    String     @default("pending") // pending, accepted, rejected, expired
  message   String?    // 邀请消息
  expiresAt DateTime   // 过期时间
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([groupId, inviteeId])
  @@index([groupId])
  @@index([inviterId])
  @@index([inviteeId])
  @@index([status])
}

// 小组加入申请
model StudyGroupJoinRequest {
  id          String     @id @default(cuid())
  groupId     String
  group       StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId      String     // 申请人ID
  status      String     @default("pending") // pending, approved, rejected
  message     String?    // 申请消息
  reviewedBy  String?    // 审批人ID
  reviewedAt  DateTime?  // 审批时间
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
  @@index([status])
}

// 小组每日一题（Phase 6 Sprint 5）
model StudyGroupDailyQuestion {
  id          String   @id @default(cuid())
  groupId     String
  group       StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  questionId  String
  question    Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionDate String    // 格式: YYYY-MM-DD
  createdAt   DateTime @default(now())
  answers     StudyGroupDailyQuestionAnswer[]

  @@unique([groupId, questionDate])
  @@index([groupId])
  @@index([questionDate])
}

// 小组每日一题答题记录（Phase 6 Sprint 5）
model StudyGroupDailyQuestionAnswer {
  id              String                   @id @default(cuid())
  dailyQuestionId String
  dailyQuestion   StudyGroupDailyQuestion  @relation(fields: [dailyQuestionId], references: [id], onDelete: Cascade)
  userId          String
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer          String                   // 用户答案
  isCorrect       Boolean                  // 是否正确
  timeSpent       Int?                     // 答题用时（秒）
  createdAt       DateTime                 @default(now())

  @@unique([dailyQuestionId, userId])
  @@index([dailyQuestionId])
  @@index([userId])
}

// 成就定义（Phase 6 Sprint 4）
model Achievement {
  id              String            @id @default(cuid())
  code            String            @unique // 成就代码（唯一标识）
  name            String            // 成就名称
  nameEn          String            // 英文名称
  description     String            // 成就描述
  descriptionEn   String            // 英文描述
  category        String            // 分类: streak, questions, exams, accuracy, social, groups
  examType        String            @default("all") // 考试类型: cale, nccaom, all (all表示全平台成就)
  icon            String            // 图标
  rarity          String            @default("common") // 稀有度: common, rare, epic, legendary
  points          Int               @default(0) // 奖励积分
  criteria        String            // 达成条件（JSON）
  order           Int               @default(0) // 显示顺序
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userAchievements UserAchievement[]

  @@index([category])
  @@index([examType])
  @@index([rarity])
  @@index([isActive])
}

// 用户成就（Phase 6 Sprint 4）
model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  progress      Int         @default(0) // 进度（0-100）
  isUnlocked    Boolean     @default(false) // 是否已解锁
  unlockedAt    DateTime?   // 解锁时间
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@index([isUnlocked])
}

// 用户积分（Phase 6 Sprint 4）
model UserPoints {
  id               String   @id @default(cuid())
  userId           String
  examType         String   @default("cale") // 考试类型: cale, nccaom, all (all表示全平台统计)
  totalPoints      Int      @default(0) // 总积分
  currentRank      Int?     // 当前排名
  previousRank     Int?     // 之前排名
  weeklyPoints     Int      @default(0) // 本周积分
  monthlyPoints    Int      @default(0) // 本月积分
  questionsAnswered Int     @default(0) // 答题数
  correctAnswers   Int      @default(0) // 正确答案数
  studyTimeMinutes Int      @default(0) // 学习时长（分钟）
  streakDays       Int      @default(0) // 连续学习天数
  lastActivityAt   DateTime @default(now()) // 最后活动时间
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([userId, examType]) // 每个用户在每个考试类型下有唯一的积分记录
  @@index([userId])
  @@index([examType])
  @@index([totalPoints])
  @@index([currentRank])
  @@index([weeklyPoints])
  @@index([monthlyPoints])
  @@index([userId, examType]) // 复合索引
}

// 排行榜缓存（Phase 6 Sprint 4）
model LeaderboardEntry {
  id        String   @id @default(cuid())
  userId    String
  category  String   // global, weekly, monthly, category_specific
  examType  String?  // 考试类型（可选）
  rank      Int      // 排名
  score     Int      // 分数
  metric    String   // 度量类型: points, study_time, questions, accuracy
  period    String   // 时间段: daily, weekly, monthly, all_time
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, category, period])
  @@index([category])
  @@index([period])
  @@index([rank])
  @@index([examType])
}

// 用户活动（Phase 6 Sprint 4）
model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  activityType String  // follow, achievement, exam_pass, group_join, share, milestone
  targetType  String?  // user, group, achievement, exam, share
  targetId    String?  // 目标ID
  content     String?  // 活动内容（JSON）
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([activityType])
  @@index([createdAt])
  @@index([isPublic])
}

// 投票
model Poll {
  id              String        @id @default(cuid())
  postId          String        @unique // 关联的帖子ID
  post            StudyGroupPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  question        String        // 投票问题
  allowMultiple   Boolean       @default(false) // 是否允许多选
  allowAddOption  Boolean       @default(false) // 是否允许添加选项
  endAt           DateTime?     // 投票截止时间
  totalVotes      Int           @default(0) // 总投票数
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  options         PollOption[]  // 投票选项
  votes           PollVote[]    // 投票记录

  @@index([postId])
  @@index([endAt])
}

// 投票选项
model PollOption {
  id          String      @id @default(cuid())
  pollId      String
  poll        Poll        @relation(fields: [pollId], references: [id], onDelete: Cascade)
  text        String      // 选项文本
  order       Int         // 选项顺序
  voteCount   Int         @default(0) // 该选项的投票数
  createdAt   DateTime    @default(now())
  votes       PollVote[]  // 投票记录

  @@index([pollId])
  @@index([order])
}

// 投票记录
model PollVote {
  id          String      @id @default(cuid())
  pollId      String
  poll        Poll        @relation(fields: [pollId], references: [id], onDelete: Cascade)
  optionId    String
  option      PollOption  @relation(fields: [optionId], references: [id], onDelete: Cascade)
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())

  @@unique([pollId, optionId, userId]) // 同一用户对同一选项只能投一次
  @@index([pollId])
  @@index([optionId])
  @@index([userId])
}

// ============================================
// 学习笔记模型
// ============================================

// 学习笔记主体
model StudyNote {
  id              String            @id @default(cuid())
  groupId         String
  group           StudyGroup        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  authorId        String
  author          User              @relation("NoteAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  // 基本信息
  title           String            // 笔记标题
  content         String            // 笔记内容（Markdown）
  summary         String?           // 摘要/简介
  coverImage      String?           // 封面图片URL

  // 分类和标签
  category        String?           // 分类（考点总结、错题整理、学习心得等）
  tags            NoteTag[]         // 标签关联

  // 关联内容
  relatedChapter  String?           // 关联章节
  relatedKnowledge String?          // 关联知识点ID（JSON数组字符串）
  attachments     NoteAttachment[]  // 附件

  // 协作功能
  allowEdit       Boolean           @default(false)  // 允许其他成员编辑
  contributors    NoteContributor[] // 贡献者列表
  versions        NoteVersion[]     // 版本历史

  // 互动数据
  viewCount       Int               @default(0)
  likeCount       Int               @default(0)
  favoriteCount   Int               @default(0)
  commentCount    Int               @default(0)

  likes           NoteLike[]
  favorites       NoteFavorite[]
  comments        NoteComment[]

  // 分享来源
  sharedFromPersonal PersonalNoteShare? @relation("SharedFromPersonalNote")

  // 状态
  status          String            @default("draft")  // draft, published, archived
  visibility      String            @default("group")  // group, public, private
  isPinned        Boolean           @default(false)    // 置顶
  isFeatured      Boolean           @default(false)    // 精选

  // 时间戳
  publishedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?

  @@index([groupId])
  @@index([authorId])
  @@index([category])
  @@index([status])
  @@index([createdAt])
  @@index([publishedAt])
}

// 笔记标签关联
model NoteTag {
  id        String      @id @default(cuid())
  noteId    String
  note      StudyNote   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tagId     String
  tag       PostTag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())

  @@unique([noteId, tagId])
  @@index([noteId])
  @@index([tagId])
}

// 笔记附件
model NoteAttachment {
  id          String      @id @default(cuid())
  noteId      String
  note        StudyNote   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  fileName    String
  fileUrl     String
  fileSize    Int         // 文件大小（字节）
  fileType    String      // MIME类型
  uploadedBy  String
  uploader    User        @relation("NoteAttachmentUploader", fields: [uploadedBy], references: [id])

  createdAt   DateTime    @default(now())

  @@index([noteId])
}

// 笔记贡献者
model NoteContributor {
  id            String      @id @default(cuid())
  noteId        String
  note          StudyNote   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  userId        String
  user          User        @relation("NoteContributorUser", fields: [userId], references: [id], onDelete: Cascade)

  role          String      @default("editor")  // editor, viewer
  contribution  String?     // 贡献描述
  editCount     Int         @default(0)

  createdAt     DateTime    @default(now())

  @@unique([noteId, userId])
  @@index([noteId])
  @@index([userId])
}

// 笔记版本历史
model NoteVersion {
  id          String      @id @default(cuid())
  noteId      String
  note        StudyNote   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  version     Int         // 版本号
  title       String
  content     String
  editorId    String
  editor      User        @relation("NoteVersionEditor", fields: [editorId], references: [id])
  changeLog   String?     // 修改说明

  createdAt   DateTime    @default(now())

  @@index([noteId])
  @@index([version])
}

// 笔记点赞
model NoteLike {
  id        String      @id @default(cuid())
  noteId    String
  note      StudyNote   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation("NoteLikeUser", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())

  @@unique([noteId, userId])
  @@index([noteId])
  @@index([userId])
}

// 笔记收藏
model NoteFavorite {
  id          String      @id @default(cuid())
  noteId      String
  note        StudyNote   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  userId      String
  user        User        @relation("NoteFavoriteUser", fields: [userId], references: [id], onDelete: Cascade)
  folderId    String?     // 收藏夹ID（可选，用于分类收藏）
  createdAt   DateTime    @default(now())

  @@unique([noteId, userId])
  @@index([noteId])
  @@index([userId])
}

// 笔记评论
model NoteComment {
  id          String        @id @default(cuid())
  noteId      String
  note        StudyNote     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  userId      String
  user        User          @relation("NoteCommentUser", fields: [userId], references: [id], onDelete: Cascade)

  content     String
  parentId    String?       // 父评论ID（用于回复）
  parent      NoteComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     NoteComment[] @relation("CommentReplies")

  likeCount   Int           @default(0)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?

  @@index([noteId])
  @@index([userId])
  @@index([parentId])
}

// ============================================
// 个人学习笔记模型
// ============================================

// 个人学习笔记主体
model PersonalNote {
  id              String                  @id @default(cuid())
  userId          String
  user            User                    @relation("PersonalNoteAuthor", fields: [userId], references: [id], onDelete: Cascade)

  // 基本信息
  title           String                  // 笔记标题
  content         String                  // 笔记内容（Markdown）
  summary         String?                 // 摘要/简介
  coverImage      String?                 // 封面图片URL

  // 分类和标签
  category        String?                 // 分类（考点总结、错题整理、学习心得等）
  tags            String?                 // 标签（JSON数组字符串）

  // 关联内容
  examType        String?                 // 考试类型 (cale/nccaom)
  relatedChapter  String?                 // 关联章节
  relatedKnowledge String?                // 关联知识点ID（JSON数组字符串）

  // 状态
  status          String                  @default("draft")  // draft, published, archived
  isFavorite      Boolean                 @default(false)    // 收藏
  isPinned        Boolean                 @default(false)    // 置顶

  // 分享记录
  sharedToGroups  PersonalNoteShare[]

  // 时间戳
  publishedAt     DateTime?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  deletedAt       DateTime?

  @@index([userId])
  @@index([category])
  @@index([status])
  @@index([examType])
  @@index([createdAt])
  @@index([publishedAt])
}

// 个人笔记分享到小组的记录
model PersonalNoteShare {
  id              String        @id @default(cuid())
  personalNoteId  String
  personalNote    PersonalNote  @relation(fields: [personalNoteId], references: [id], onDelete: Cascade)
  groupId         String
  group           StudyGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  studyNoteId     String?       @unique
  studyNote       StudyNote?    @relation("SharedFromPersonalNote", fields: [studyNoteId], references: [id], onDelete: SetNull)

  sharedBy        String
  sharer          User          @relation(fields: [sharedBy], references: [id], onDelete: Cascade)

  // 分享时的配置
  shareMessage    String?       // 分享时的附言

  createdAt       DateTime      @default(now())

  @@unique([personalNoteId, groupId])
  @@index([personalNoteId])
  @@index([groupId])
  @@index([sharedBy])
}

// ===================================================================
// 学习资料库 (Study Resource Library)
// ===================================================================

// 学习资料
model StudyResource {
  id              String   @id @default(cuid())
  groupId         String
  group           StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  uploaderId      String
  uploader        User @relation("ResourceUploader", fields: [uploaderId], references: [id], onDelete: Cascade)

  // 基本信息
  title           String              // 资料标题
  description     String?             // 资料描述
  category        String              // 资料分类
  tags            String?             // 标签（JSON数组）

  // 资料类型和存储
  type            String              // document, image, video, link, archive
  fileUrl         String?             // 文件URL（如果是上传的文件）
  fileName        String?             // 原始文件名
  fileSize        Int?                // 文件大小（字节）
  mimeType        String?             // MIME类型
  externalUrl     String?             // 外部链接URL（如果是链接类型）
  thumbnailUrl    String?             // 缩略图URL

  // 版本管理
  version         Int      @default(1)              // 版本号
  previousVersionId String?                        // 上一版本ID
  previousVersion   StudyResource? @relation("ResourceVersion", fields: [previousVersionId], references: [id])
  nextVersions      StudyResource[] @relation("ResourceVersion")

  // 状态和权限
  status          String   @default("pending")     // pending, approved, rejected
  visibility      String   @default("members")     // members, admins_only
  requiresApproval Boolean  @default(false)        // 是否需要审核
  approvedBy      String?                          // 审核者ID
  approvedAt      DateTime?                        // 审核时间
  rejectionReason String?                          // 拒绝原因

  // 统计数据
  viewCount       Int      @default(0)             // 浏览次数
  downloadCount   Int      @default(0)             // 下载次数
  ratingSum       Int      @default(0)             // 评分总和
  ratingCount     Int      @default(0)             // 评分人数
  averageRating   Float?                           // 平均评分

  // 关联数据
  ratings         ResourceRating[]                 // 评分记录
  comments        ResourceComment[]                // 评论
  downloads       ResourceDownload[]               // 下载记录
  favorites       ResourceFavorite[]               // 收藏记录
  files           ResourceFile[]                   // 多文件支持

  // 时间戳
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?                        // 软删除

  @@index([groupId])
  @@index([uploaderId])
  @@index([category])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([downloadCount])
  @@index([averageRating])
}

// 资料文件（支持一个资源包含多个文件）
model ResourceFile {
  id              String   @id @default(cuid())
  resourceId      String
  resource        StudyResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  // 文件信息
  fileName        String              // 原始文件名
  fileUrl         String              // 文件URL
  fileSize        Int                 // 文件大小（字节）
  mimeType        String              // MIME类型
  type            String              // document, image, video, archive, other
  thumbnailUrl    String?             // 缩略图URL

  // 排序和显示
  displayOrder    Int      @default(0) // 显示顺序
  isPrimary       Boolean  @default(false) // 是否为主文件（用于缩略图）

  // 统计
  downloadCount   Int      @default(0) // 单个文件下载次数

  // 时间戳
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([resourceId])
  @@index([type])
  @@index([displayOrder])
}

// 资料评分
model ResourceRating {
  id          String   @id @default(cuid())
  resourceId  String
  resource    StudyResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  userId      String
  user        User @relation("ResourceRatings", fields: [userId], references: [id], onDelete: Cascade)
  rating      Int                     // 1-5星评分
  review      String?                 // 评价文字
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([resourceId, userId])
  @@index([resourceId])
  @@index([userId])
  @@index([rating])
}

// 资料评论
model ResourceComment {
  id          String   @id @default(cuid())
  resourceId  String
  resource    StudyResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  userId      String
  user        User @relation("ResourceComments", fields: [userId], references: [id], onDelete: Cascade)
  content     String                  // 评论内容
  parentId    String?                 // 父评论ID（支持回复）
  parent      ResourceComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies     ResourceComment[] @relation("CommentReplies")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?               // 软删除

  @@index([resourceId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
}

// 资料下载记录
model ResourceDownload {
  id          String   @id @default(cuid())
  resourceId  String
  resource    StudyResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  userId      String
  user        User @relation("ResourceDownloads", fields: [userId], references: [id], onDelete: Cascade)
  ipAddress   String?                 // IP地址（防刷）
  userAgent   String?                 // 用户代理
  createdAt   DateTime @default(now())

  @@index([resourceId])
  @@index([userId])
  @@index([createdAt])
}

// 资料收藏
model ResourceFavorite {
  id          String   @id @default(cuid())
  resourceId  String
  resource    StudyResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  userId      String
  user        User @relation("ResourceFavorites", fields: [userId], references: [id], onDelete: Cascade)
  folderId    String?                 // 收藏夹ID（可选）
  folder      ResourceFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())

  @@unique([resourceId, userId])
  @@index([resourceId])
  @@index([userId])
  @@index([folderId])
}

// 收藏夹（个人分类）
model ResourceFolder {
  id          String   @id @default(cuid())
  userId      String
  user        User @relation("ResourceFolders", fields: [userId], references: [id], onDelete: Cascade)
  name        String                  // 收藏夹名称
  description String?                 // 描述
  icon        String?                 // 图标
  color       String?                 // 颜色
  isDefault   Boolean  @default(false) // 是否为默认收藏夹
  favorites   ResourceFavorite[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([isDefault])
}
